## 2022-10-25
# Introduction: This tutorial use a small example to go through ReDeeM-V pipeline,
#               which starts with mtDNA library fastq files and end with consensus variant calling 
# Inputs: R1.fq (150nt), R2.fq (150nt), i5.fq (150nt)
# Key Output: QCplot.png (QC plot assesing mtDNA mapping as well as library complexity, etc)
# Key Output: QualifiedTotalCts, RawGenotypes.Total.StrandBalance, RawGenotypes.VerySensitive.StrandBalance, RawGenotypes.Sensitive.StrandBalance, RawGenotypes.Specific.StrandBalance
#             

## Download the REDEEM-V and assign paths
git clone https://github.com/chenweng1991/REDEEM-V.git
REDEEM_V=/lab/solexa_weissman/cweng/Packages/REDEEM-V/  
MyMultiome=$REDEEM_V/MyMultiome/
mitoConsensus=$REDEEM_V/mitoConsensus/
## Step 0: Make mitoMask bowtie2 index (bowtie2 is required)
####----download hg38 fasta file and mitochondrial blacklist file 
mkdir Genome
cd Genome
wget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz 
wget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes
wget https://raw.githubusercontent.com/caleblareau/mitoblacklist/master/combinedBlacklist/hg38.full.blacklist.bed
gunzip hg38.fa.gz
####----make hg38 mito masked bowtie2 index
bedtools maskfasta  -fi hg38.fa -bed hg38.full.blacklist.bed -fo hg38.mitoMask.fa
bowtie2-build hg38.mitoMask.fa hg38.mitoMask  ## This takes time and will generate following, if on WI server ln -s /lab/solexa_weissman/cweng/Genomes/GRCH38/GRCH38_Bowtie2_MitoMask/*.bt2 ./

## Step1: Get sequencing result and QC 
####----link the example fq files
ln -s $REDEEM_V/source/Example.R1.fq.gz ./
ln -s $REDEEM_V/source/Example.R2.fq.gz ./
ln -s $REDEEM_V/source/Example.i5.fq.gz ./
####----fastqc and multiqc
mkdir fastqc
fastqc -o fastqc Example.R1.fq.gz Example.i5.fq.gz Example.R2.fq.gz
multiqc fastqc

## Step2: mapping and basic QC
$MyMultiome/MultiomeATAC_mito.sh -n Tutorial_Mito -1 Example.R1.fq.gz -2 Example.R2.fq.gz -i Example.i5.fq.gz -c 0 -t 8 -m $MyMultiome -b Genome/hg38.mitoMask  # add -q for quick, which skip the QC steps

## Step3: Parse the Cellranger qualified cell barcode
ln -s $REDEEM_V/source/barcodes.tsv.gz ./
Rscript $MyMultiome/Helpers/RNAbc2ATAC.R barcodes.tsv.gz Tutorial_atac.barcodes.tsv

## Step4, prepare for variant calling
Threads=24
WD=`pwd`/Out_mitoConsensus
python $mitoConsensus/Preprocess.py -i Tutorial_Mito.uniqmapped.bam  -c $Threads -b Tutorial_atac.barcodes.tsv -o $WD -g rCRS -bt BC -sd $mitoConsensus

## Step5, run consensus variant calling
####----Run variant calling in parallel
echo $WD
for ((i=1;i<=$Threads;i++))
do
bsub python $mitoConsensus/mitoConsensus.py  barcodes.$i $WD BC 30
done
####----Concat together
$mitoConsensus/Finalize.sh $WD $Threads $mitoConsensus

# Understanding the result
# Location: The results are saved in $WD/final
# Major 5 files: QualifiedTotalCts, RawGenotypes.Total.StrandBalance(Least stringent), RawGenotypes.VerySensitive.StrandBalance, RawGenotypes.Sensitive.StrandBalance, RawGenotypes.Specific.StrandBalance (Most Stringent)
# 
